class LinkedList
  attr_accessor :head, :tail
  
  def initialize
    @head = nil
    @tail = nil
  end
  
  def append(value)
    #adds a new node containing value to the end of the list
    node = Node.new(value)
    return @head = node if head.nil?
    if tail.nil?
      head.next_node = node
      return @tail = node
    end
    tail.next_node = node
    @tail.node
  end

  def prepend(value)
    #adds a new node containing value to the start of the list
    @tail = head if tail.nil?
    @head = Node.new(value, head)
  end

  def size
    #returns the total number of nodes in the list
    counter = 0
    current_node = @head
    until current_node.nil?
      counter += 1
      current_node = current_node.next_node
    end
    counter
  end

  def at(index)
    #returns the node at the given index
    list_size = size
    each_with_index do |node, i|
      return node if i.eql?(list_size + index) # allow negative indexing
      return node if i.eql?(index)
    end
    nil
  end

  def pop
    #removes the last element from the list
    popped = tail
    @head = nil if tail.nil?
    @tail = at(-2)
    tail.next_node = nil unless tail.nil?
    popped
  end
  
  def contains?(value)
    #returns true if the value passed in the list and the otherwise returns false
    return false if head.nil?

    return true if head.value.eql?(value) || tail.value.eql?(value)

    each { |node| return true if node.value.eql?(value) }
    false
  end

  def find(value)
    #returns the index of the node containing value, or nil if not found
    each_with_index do |node, index|
      return index if node.value.eql?(value)
    end
    nil
  end

  def to_s
    values = map { |node| "( #{node.value} )" }
    values << 'nil'
    values.join(' -> ')
  end

end

class Node
  attr_reader :value
  attr_accessor :next_node

  def initialize(value = nil, next_node = nil)
    @value = value
    @next_node
  end
end